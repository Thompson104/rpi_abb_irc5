#!/usr/bin/env python

# Copyright (c) 2017, Rensselaer Polytechnic Institute, Wason Technology LLC
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Rensselaer Polytechnic Institute, or Wason 
#       Technology LLC, nor the names of its contributors may be used to 
#       endorse or promote products derived from this software without 
#       specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rospy
from rpi_abb_irc5 import RAPID, JointTarget
from rpi_abb_irc5.srv import \
    RapidStart, RapidStartRequest, RapidStartResponse, \
    RapidStop, RapidStopRequest, RapidStopResponse, \
    RapidGetStatus, RapidGetStatusRequest, RapidGetStatusResponse, \
    RapidGetDigitalIO, RapidGetDigitalIORequest, RapidGetDigitalIOResponse, \
    RapidSetDigitalIO, RapidSetDigitalIORequest, RapidSetDigitalIOResponse, \
    RapidReadEventLog, RapidReadEventLogRequest, RapidReadEventLogResponse, \
    RapidGetVariable, RapidGetVariableRequest, RapidGetVariableResponse, \
    RapidSetVariable, RapidSetVariableRequest, RapidSetVariableResponse

from control_msgs.msg import FollowJointTrajectoryAction, \
     FollowJointTrajectoryFeedback, FollowJointTrajectoryResult

from rpi_abb_irc5.msg import RapidEventLogMessage
from datetime import datetime
from distutils.util import strtobool
from actionlib import action_server
import numpy as np

import traceback

class RapidNode(object):
    
    
    def __init__(self, robot_host):
        
        self.rapid=RAPID(robot_host)
        
        rospy.Service('rapid/start', RapidStart, self.rapid_start)
        rospy.Service('rapid/stop', RapidStop, self.rapid_stop)
        rospy.Service('rapid/status', RapidGetStatus, self.rapid_get_status)
        rospy.Service('rapid/get_digital_io', RapidGetDigitalIO, self.rapid_get_digital_io)
        rospy.Service('rapid/set_digital_io', RapidSetDigitalIO, self.rapid_set_digital_io)
        rospy.Service('rapid/read_event_log', RapidReadEventLog, self.rapid_read_event_log)
        rospy.Service('rapid/get_rapid_variable', RapidGetVariable, self.rapid_get_variable)
        rospy.Service('rapid/set_rapid_variable', RapidSetVariable, self.rapid_set_variable)
        
    
    def rapid_start(self, req):
        r=RapidStartResponse()
        try:
            if req.reset_pp:
                self.rapid.resetpp()
            cycle='asis'
            if len(req.cycle) > 0:
                cycle=req.cycle
            self.rapid.start(cycle)  
            r.success=True
            return r
        except:
            traceback.print_exc()
            r.success=False
            return r
    
    def rapid_stop(self, req):
        r=RapidStopResponse()
        try:
            self.rapid.stop()        
            r.success=True
            return r
        except:
            traceback.print_exc()
            r.success=False
            return r
    
    def rapid_get_status(self, req):
        r=RapidGetStatusResponse()
        try:
            s=self.rapid.get_execution_state()
            r.running=s.ctrlexecstate=='running'
            r.cycle=s.cycle
            r.opmode=self.rapid.get_operation_mode()  
            r.ctrlstate=self.rapid.get_controller_state() 
            r.success=True
            return r
        except:
            traceback.print_exc()
            r.success=False
            return r
    def rapid_get_digital_io(self, req):
        r=RapidGetDigitalIOResponse()
        try:
            r.lvalue=self.rapid.get_digital_io(req.signal)
            r.success=True
            return r
        except:
            traceback.print_exc()
            r.success=False
            return r
    
    def rapid_set_digital_io(self, req):
        r=RapidSetDigitalIOResponse()
        try:
            self.rapid.set_digital_io(req.signal, req.lvalue)
            r.success=True
            return r
        except:
            traceback.print_exc()
            r.success=False
            return r
        
            
    def rapid_read_event_log(self, req):
        r=RapidReadEventLogResponse()
        try:
            rapid_msgs=self.rapid.read_event_log()
            msgs2=[]
            for m in rapid_msgs:
                m2=RapidEventLogMessage()
                m2.msgtype=m.msgtype
                m2.code=m.code
                m2.tstamp = rospy.Time.from_sec((m.tstamp - datetime.utcfromtimestamp(0)).total_seconds())                        
                m2.args=m.args
                m2.title=m.title
                m2.desc=m.desc
                m2.conseqs=m.conseqs
                m2.causes=m.causes
                m2.actions=m.actions
                msgs2.append(m2)
            r.messages=msgs2
            r.success=True
            return r            
        except:
            traceback.print_exc()
            r.success=False
            return r
    

    def rapid_get_variable(self, req):
        r=RapidGetVariableResponse()
        try:
            r.value=self.rapid.get_rapid_variable(req.name)
            r.success=True
            return r
        except:
            traceback.print_exc()
            r.success=False
            return r
    
    def rapid_set_variable(self, req):
        r=RapidSetVariableResponse()
        try:
            self.rapid.set_rapid_variable(req.name, req.value)
            r.success=True
            return r
        except:
            traceback.print_exc()
            r.success=False
            return r

class RapidTrajectoryServer(object):
    
    def __init__(self, robot_host):
        
        
        self._rapid=RAPID(robot_host)
        
        self._action = action_server.ActionServer("rapid/joint_trajectory_action", FollowJointTrajectoryAction, self.goal_cb, self.cancel_cb, auto_start=False)        
        self._action.start()
        
        self._current_goal=None
        self._timer=rospy.Timer(rospy.Duration(0.1), self.timer_cb)
    
    
    def timer_cb(self, evt):
        with self._action.lock:
            if self._current_goal is None:
                return
        
            active_count=self._rapid.get_rapid_variable_num("JointTrajectoryCount")
            if (active_count == 0):
                gh=self._current_goal
                self._current_goal=None
                g = gh.get_goal()
                j=self._rapid.get_jointtarget().robax
                if np.max(np.abs(np.subtract(g.trajectory.points[-1].positions,j))) < np.deg2rad(0.1):
                    rospy.loginfo("Trajectory completed")
                    gh.set_succeeded()
                else:
                    rospy.loginfo("Trajectory aborted")
                    gh.set_aborted()
        
                
    def goal_cb(self, gh):
        
        if self._current_goal is not None:
            self._current_goal.set_canceled()
        
        self._current_goal=gh
        
        g = gh.get_goal()
        
        if len(g.trajectory.points) > 100:
            gh.set_rejected()
            return
        
        last_t = 0
                
        rapid_time=[0.0]*100
        rapid_jointtarget=[JointTarget(np.zeros(6,),np.zeros(6,))]*100
        rapid_count=len(g.trajectory.points)
        
        i=0
        
        for p in g.trajectory.points:
            
            time_from_start = p.time_from_start.to_sec()
            
            if (time_from_start < last_t):
                gh.set_rejected()
                rospy.logerr("Invalid duration_from_start in trajectory")
                return
            
            rapid_time[i]=time_from_start-last_t
            rapid_jointtarget[i]=JointTarget(p.positions,np.zeros((6,)))
            
            i+=1
            
            last_t = time_from_start
                        
                            
        gh.set_accepted()        
                               
        rospy.loginfo("Trajectory received")
        
        self._rapid.set_rapid_variable_num("JointTrajectoryCount",0)
        self._rapid.set_rapid_variable_num_array('JointTrajectoryTime', rapid_time)
        for i in xrange(10):
            if (rapid_count < i*10):
                break
            self._rapid.set_rapid_variable_jointtarget_array("JointTrajectory_%d" % i , rapid_jointtarget[i*10:(i*10+10)])
        self._rapid.set_rapid_variable_num("JointTrajectoryCount",rapid_count)
        
        
    def cancel_cb(self, gh):
        if self._current_goal is None:
            return
        if (gh == self._current_goal):                                
            self._rapid.set_rapid_variable_num("JointTrajectoryCount",0)
            self._current_goal=None
            gh.set_canceled()
            
        pass        


if __name__ == '__main__':
        
    rospy.init_node('abb_irc5_rapid')
    
    robot_host=rospy.get_param('~abb_irc5_uri')    
    
    r=RapidNode(robot_host)
    r2=RapidTrajectoryServer(robot_host)            
    
    rospy.spin()
    
    
    #Stop RAPID on node shutdown    
    try:
        print rospy.get_param('~abb_irc5_rapid_auto_stop', False)
        if bool(strtobool(str(rospy.get_param('~abb_irc5_rapid_auto_stop', False)))):
            r.rapid_stop()
    except:
        traceback.print_exc()
        pass
    